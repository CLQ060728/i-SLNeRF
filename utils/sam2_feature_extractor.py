# Author: Qian Liu
# Email: liu.qian.pro@gmail.com

import torch, numpy as np
import torch.nn.functional as F
from ..sam2.sam2.build_sam import build_sam2
from ..sam2.sam2.automatic_mask_generator import SAM2AutomaticMaskGenerator


def get_sam2_masks(image, device='cuda:0'):
    """
    Get SAM2 masks for a given image.
    :param image: Input image as a numpy array, (H, W, C) uint8 format.
    :param device: GPU device to use for computation.
    :return: List of masks generated by SAM2.
    """
    sam2_checkpoint = "checkpoints/sam2.1_hiera_large.pt"
    # sam2_checkpoint = "checkpoints/sam2.1_hiera_base_plus.pt"
    model_cfg = "configs/sam2.1/sam2.1_hiera_l.yaml"
    # model_cfg = "configs/sam2.1/sam2.1_hiera_b+.yaml"

    sam2 = build_sam2(model_cfg, sam2_checkpoint, device=device, apply_postprocessing=False)

    # mask_generator = SAM2AutomaticMaskGenerator(sam2)
    mask_generator = SAM2AutomaticMaskGenerator(
        model=sam2,
        points_per_side=128,
        points_per_batch=128,
        pred_iou_thresh=0.7,
        stability_score_thresh=0.92,
        stability_score_offset=0.7,
        crop_n_layers=1,
        box_nms_thresh=0.7,
        crop_n_points_downscale_factor=2,
        min_mask_region_area=25.0,
        use_m2m=True,
    )

    masks = mask_generator.generate(image)

    del sam2
    del mask_generator
    torch.cuda.empty_cache()

    return masks
    